name: CD-Deploy-Webservice
on:
  push:
    branches:
      - 'develop'
    paths:
      - 'deployment/webservice/**'

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  define-infrastructure:
    runs-on: ubuntu-latest
    steps:
  
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
            terraform_wrapper: false

      - name: Run Terraform plan
        id: tf-plan
        working-directory: 'terraform'
        run: |
          terraform init -backend-config="key=mlops-zoomcamp-prod.tfstate" -reconfigure && terraform plan -var-file=vars/prod.tfvars
    
      - name: Run Terraform plan apply
        id: tf-apply
        working-directory: 'terraform'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "::set-output name=aws_account_id::$(terraform output aws_account_id | xargs)"
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
          echo "::set-output name=flask_image_uri::$(terraform output flask_image_uri | xargs)"
          echo "::set-output name=flask_ec2_public_dns::$(terraform output flask_ec2_public_dns | xargs)"
          echo "::set-output name=ec2_flask_port::$(terraform output ec2_flask_port | xargs)"
          echo "::set-output name=mage_ai_ec2_public_dns::$(terraform output mage_ai_ec2_public_dns | xargs)"
          echo "::set-output name=mlflow_ec2_public_dns::$(terraform output mlflow_ec2_public_dns | xargs)"
  
      - name: Set Terraform plan apply Output
        run: |
          echo "aws_account_id=${{ steps.tf-apply.outputs.aws_account_id }}" >> $GITHUB_OUTPUT  
          echo "ecr_repo=${{ steps.tf-apply.outputs.ecr_repo }}" >> $GITHUB_OUTPUT
          echo "flask_image_uri=${{ steps.tf-apply.outputs.flask_image_uri }}" >> $GITHUB_OUTPUT 
          echo "flask_ec2_public_dns=${{ steps.tf-apply.outputs.flask_ec2_public_dns }}" >> $GITHUB_OUTPUT 
          echo "ec2_flask_port=${{ steps.tf-apply.outputs.ec2_flask_port }}" >> $GITHUB_OUTPUT  

  build-push-docker-image:
    runs-on: ubuntu-latest
    needs: define-infrastructure
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push docker image to AWS ECR
        id: build-image-step
        working-directory: 'deployment/webservice'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  
          ECR_REPOSITORY: ${{ needs.define-infrastructure.outputs.ecr_repo }}
          IMAGE_TAG: "latest"
        run: |
            docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} -f Dockerfile.salary-prediction-fp-py .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set Terraform plan apply Output
        run: echo "ecr_repo=${{ steps.build-image-step.outputs.image_uri }}" >> $GITHUB_OUTPUT 

  update-ec2-flask:
    runs-on: ubuntu-latest
    needs: [build-push-docker-image, define-infrastructure]
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Update container in AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.define-infrastructure.outputs.flask_ec2_public_dns }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}          
          script: |
            aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ needs.define-infrastructure.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com
            docker pull ${{ needs.define-infrastructure.outputs.flask_image_uri }}
            docker run -d -p ${{ needs.define-infrastructure.outputs.ec2_flask_port }}:${{ needs.define-infrastructure.outputs.ec2_flask_port }} ${{ needs.define-infrastructure.outputs.flask_image_uri }}
            





